#+title: Create gnuplot scripts

This is a work in progress. You should expect API changes... 

* Table of contents                                            :TOC:noexport:
- [[#introduction][Introduction]]
- [[#getting-started][Getting started]]
  - [[#first-plot][First plot]]

* Introduction

The aim of this small package is to easily use gnuplot from
Julia. You can use this package for:
- gnuplot direct plotting from Julia
- creating and saving gnuplot scripts
- exporting gnuplot figures 

* Getting started

** First plot

By default =GnuPlotScript()= opens a pipe and allows interactive
plotting. On my computer this script 

#+begin_src julia :exports code :epilogue "export_png(gp, \"./figures/trig.png\")"
  using GnuPlotScripting          

  gp = GnuPlotScript()

  X=[-pi:0.1:pi;];
  Ys =sin.(X);
  Yc =cos.(X);

  id=register_data(gp,hcat(X,Ys,Yc))
  replot(gp,id,"u 1:3 w l t 'cos'")
  replot(gp,id,"u 1:2 w l t 'sin'")
#+end_src

takes about 0.7 seconds to render the plot. If you do not want to use
direct drawing, you can initialize =gp= with:

#+begin_src julia :exports code :eval never
   gp = GnuPlotScript(direct_plot = false)
#+end_src


- Remark: :: contrary to gnuplot you can use =replot= even for the first
  plot. The advantage is that you can chain plots without worrying
  about the first plot. To erase old plots and start a new one you can
  still use =plot=.

You can export the figure as follows:

#+begin_src julia :exports code :eval never
  export_png(gp, "./figures/trig.png")
#+end_src

[[file:figures/trig.png][file:./figures/trig.png]]

or create a gnuplot script as follows:

#+begin_src julia :exports code :eval never
  write_script("./figures/trig.gp",gp)
#+end_src

To "replay" the saved script, simply launch gnuplot from a shell
terminal:

#+begin_src sh :eval never
  gnuplot ./figures/trig.gp 
#+end_src

To prevent gnuplot from closing immediately after the script is ended,
you can add a final =-= to the gnuplot command.

#+begin_src sh :eval never
  gnuplot ./figures/trig.gp -
#+end_src

