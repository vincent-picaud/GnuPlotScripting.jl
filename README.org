#+options: H:3 toc:t num:t \\n:nil ::t |:t ^:{} -:t f:t *:t tex:t d:t tags:not-in-toc
#+title: Create gnuplot scripts

This is a work in progress. This package assumes some knowledge of
[[http://www.gnuplot.info/][http://www.gnuplot.info/]]. 

* Table of contents                                            :TOC:noexport:
- [[#introduction][Introduction]]
- [[#getting-started][Getting started]]
  - [[#instant-plotting-from-julia][Instant plotting from Julia]]
  - [[#exporting-gnuplot-scripts][Exporting gnuplot scripts]]
  - [[#exporting-figures][Exporting figures]]
- [[#general-considerations][General considerations]]
  - [[#data-registration][Data registration]]
  - [[#the-role-of-free_form][The role of =free_form()=]]
- [[#api][API]]
- [[#gnuplot-references][Gnuplot references]]

* Introduction

The aim of this small package is to easily use gnuplot from
Julia. You can use this package for:
- gnuplot direct plotting from Julia
- creating and saving gnuplot scripts
- exporting gnuplot figures 

This is a super lightweight solution if you want to quickly visualize
some data.
  
* Getting started

** Instant plotting from Julia

By default =GnuPlotScript()= opens a pipe and allows plots to be
immediately rendered in a companion gnuplot window. On my computer
this script

#+begin_src julia :exports code :epilogue "export_png(gp, \"./figures/trig.png\")"
  using GnuPlotScripting          

  gp = GnuPlotScript()

  X=[-pi:0.1:pi;];
  Ys =sin.(X);
  Yc =cos.(X);

  id=register_data(gp,hcat(X,Ys,Yc))
  free_form(gp,"replot '$id' u 1:3 w l t 'cos'")
  free_form(gp,"replot '$id' u 1:2 w l t 'sin'")
#+end_src

#+RESULTS:

takes about 0.7 seconds to render the plot.

[[file:figures/trig.png][file:./figures/trig.png]]

- Remark: :: contrary to gnuplot you can use =replot= even for the first
  plot. The advantage is that you can chain plots without worrying
  about the first plot. To erase old plots and start a new one you can
  still use =plot=.

If you do not want to use direct drawing, you can initialize =gp= with:

#+begin_src julia :exports code :eval never
  gp = GnuPlotScript(direct_plot = false)
#+end_src

** Exporting gnuplot scripts

At any time you can export the gnuplot script as follows:

#+begin_src julia :exports code :eval never
  write_script("./figures/trig.gp",gp)
#+end_src

To "replay" the saved script, simply launch gnuplot from a shell
terminal:

#+begin_src sh :eval never
  gnuplot ./figures/trig.gp 
#+end_src

To prevent gnuplot from closing immediately after the script is ended,
you can add a final =-= to the gnuplot command.

#+begin_src sh :eval never
  gnuplot ./figures/trig.gp -
#+end_src

** Exporting figures

You can export the figure as follows:

#+begin_src julia :exports code :eval never
  export_png(gp, "./figures/trig.png")
#+end_src

* General considerations

** Data registration

In order to be saved only once, even when reused, data need be
registered. This is performed by:
#+begin_src julia :eval never
  id_1 = register_data(gp,my_vector)
  id_2 = register_data(gp,my_matrix)
#+end_src

You will get an =id= identifying data. This identifier can be then used
in plot functions:

#+begin_src julia
  using GnuPlotScripting

  X = -2:0.1:2
  Y = -2:0.1:2
  M = [exp(-x_i*x_i-y_j*y_j) for x_i=X, y_j=Y]

  gp = GnuPlotScript()

  id = register_data(gp, M)

  free_form(gp,"set autoscale fix")
  free_form(gp,"plot '$id' matrix using 1:2:3 with image")

  export_png(gp, "./figures/2D.png")
#+end_src

#+RESULTS:


[[file:figures/2D.png][file:./figures/2D.png]]

** The role of =free_form()=

Even if I have started to wrap some gnuplot functionalities in a Julia
context, like

#+begin_src julia :eval never
  gp = GnuPlotScript()
  set_title(gp,"My_plot_title",enhanced=false)
#+end_src

I do not want to do that systematically. This would be a lot of
work and add a gnuplot software version dependence.

That is the reason why, one must generally directly talk to gnuplot using
the =free_form= function:

#+begin_src julia :eval never
  gp = GnuPlotScript()
  free_form(gp, "set title \"My_plot_title\" noenhanced")
#+end_src

In the future I will add some "recipes" for useful/recurrent tasks. A
simple example of such functionality is adding vertical line.

#+begin_src julia 
  using GnuPlotScripting

  gp = GnuPlotScript()

  add_vertical_line(gp,-5.0,name="left")
  add_vertical_line(gp,+5.0,name="right")

  free_form(gp,"plot exp(-x*x/25) with line t 'Gaussian'")

  export_png(gp, "./figures/vline.png")
#+end_src

#+RESULTS:

[[file:figures/vline.png][file:figures/vline.png]]

* TODO API

This is in the "TODO" list.

For the moment you will have to use Julia =help?=

* Gnuplot references

- [[http://www.gnuplot.info/][GnuPlot]] official page  
- [[https://www.manning.com/books/gnuplot-in-action-second-edition][GnuPlot in Action]] a very well written book 
- [[http://www.gnuplotting.org/][www.gnuplotting.org]] a lot of great examples
- [[http://folk.uio.no/inf3330/scripting/doc/gnuplot/Kawano/index-e.html][GnuPlot not so Frequently Asked Questions]]
- [[https://en.wikipedia.org/wiki/Gnuplot][Wikipedia]] the free encyclopedia...


