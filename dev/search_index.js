var documenterSearchIndex = {"docs":
[{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"CurrentModule = GnuPlotScripting","category":"page"},{"location":"getting_started/#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"getting_started/#TODO","page":"Getting started","title":"TODO","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = GnuPlotScripting","category":"page"},{"location":"#The-GnuPlotScripting.jl-package","page":"Home","title":"The GnuPlotScripting.jl package","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package aim is to easily generate gnuplot plots from Julia. It allows to:","category":"page"},{"location":"","page":"Home","title":"Home","text":"- to perform direct rendering of Gnuplot plots from Julia\n- to create and save Gnuplot scripts (possibly with embedded data)\n- to easily export Gnuplot figures","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is a lightweight solution that allows you to quickly visualize some data.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using GnuPlotScripting\n\ngp = GnuPlotScript(;direct_plot=false)\nfree_form(gp,\"set terminal x11\") # hide\n\nX=[-pi:0.1:pi;];\nYs = sin.(X);\nYc = cos.(X);\n\nid=register_data(gp,hcat(X,Ys,Yc))\nfree_form(gp,\"replot '$id' u 1:3 w l t 'cos'\")\nfree_form(gp,\"replot '$id' u 1:2 w l t 'sin'\")\n\nexport_png(gp, \"sin.png\") # hide\nwrite_script(\"test.gp\",gp) # hide\nrun(Cmd([GnuPlotScripting.gnuplot_exe, \"-c\", \"test.gp\"])) # hide\nnothing # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: image info)","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [GnuPlotScripting]","category":"page"},{"location":"#GnuPlotScripting.GnuPlotScript","page":"Home","title":"GnuPlotScripting.GnuPlotScript","text":"gp = GnuPlotScript(;direct_plot = true)\n\nCreate a gnuplot script gp. If direct_plot is true, simultaneously plot the registered operations.\n\nUsage example\n\nYou can perform a simple plot as follows:\n\ngp = GnuPlotScript(;direct_plot = true)\n\nX=[-pi:0.1:pi;];\nYs = sin.(X);\nYc = cos.(X);\n\nid = register_data(gp,hcat(X,Ys,Yc))\nfree_form(gp,\"replot '$id' u 1:3 w l t 'cos'\")\nfree_form(gp,\"replot '$id' u 1:2 w l t 'sin'\")\n\nThe plot will be created immediately.\n\nAlso see\n\nregister_data \nfree_form \n\n\n\n\n\n","category":"type"},{"location":"#GnuPlotScripting.free_form-Tuple{GnuPlotScript, AbstractString}","page":"Home","title":"GnuPlotScripting.free_form","text":"free_form(gp::GnuPlotScript,gp_line::AbstractString)\n\nWrite gnuplot commands. This command line is directly forwarded to Gnuplot. The only difference is that you can use replot even for the first plot. This is convenient when you chain plots, you do not have to worry if the current command is the first plot.\n\nUsage example\n\nusing GnuPlotScripting\n\ngp = GnuPlotScript()\n\nfree_form(gp, \"replot sin(x) lw 2 t 'a trigonometric function'\")\n\n\n\n\n\n","category":"method"},{"location":"#GnuPlotScripting.register_data-Tuple{GnuPlotScript, AbstractVecOrMat}","page":"Home","title":"GnuPlotScripting.register_data","text":"register_data(gp::GnuPlotScript,\n              data::AbstractVecOrMat;\n              copy_data::Bool=true) -> id\n\nRegister data and return the associated data identifier. Registered data is embedded in the plot script file. The returned id is used to reference registered data.\n\nUsage example\n\ngp = GnuPlotScript()\n\nM = rand(10,3)\n\nid = register_data(gp, M)\n\nfree_form(gp,\"replot $id u 1:2\")\nfree_form(gp,\"replot $id u 1:3\")\n\n\n\n\n\n","category":"method"},{"location":"#GnuPlotScripting.set_title-Tuple{GnuPlotScript, AbstractString}","page":"Home","title":"GnuPlotScripting.set_title","text":"set_title(gp::GnuPlotScript,title::AbstractString;\n                   enhanced::Bool = false)\n\nDefine plot title. If enhanced is true, some characters are processed in a special way. By example _ subscripts text.\n\n\n\n\n\n","category":"method"}]
}
